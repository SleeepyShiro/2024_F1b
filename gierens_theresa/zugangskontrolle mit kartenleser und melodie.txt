#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 53
#define RST_PIN 5
#define BUZZER_PIN 4

byte readCard[4];
String MasterTag = "232A9834";
String MasterTag2 = "1F2DB71Ee";
String tagID = "";

// Create instances
MFRC522 mfrc522(SS_PIN, RST_PIN);

  

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define NOTE_REST  0

const int Achtelnote = 250;  
const int PunktierteViertelnote = Achtelnote * 3;
const int Viertelnote = Achtelnote * 2; 
const int Halbenote = Viertelnote * 2; 

int melody[][2] = {
  // "A-Teil Takte 1-5 inkl. Wiederholung"
  {NOTE_E4, Viertelnote}, {NOTE_E4, Viertelnote}, {NOTE_F4, Viertelnote}, {NOTE_G4, Viertelnote},
  {NOTE_G4, Viertelnote}, {NOTE_F4, Viertelnote}, {NOTE_E4, Viertelnote}, {NOTE_D4, Viertelnote},
  {NOTE_C4, Viertelnote}, {NOTE_C4, Viertelnote}, {NOTE_D4, Viertelnote}, {NOTE_E4, Viertelnote},  
  {NOTE_E4, PunktierteViertelnote}, {NOTE_D4, Achtelnote}, {NOTE_D4, Halbenote},
 {NOTE_E4, Viertelnote}, {NOTE_E4, Viertelnote}, {NOTE_F4, Viertelnote}, {NOTE_G4, Viertelnote},
  {NOTE_G4, Viertelnote}, {NOTE_F4, Viertelnote}, {NOTE_E4, Viertelnote}, {NOTE_D4, Viertelnote},
  {NOTE_C4, Viertelnote}, {NOTE_C4, Viertelnote}, {NOTE_D4, Viertelnote}, {NOTE_E4, Viertelnote},
  {NOTE_D4, PunktierteViertelnote}, {NOTE_C4, Achtelnote},  {NOTE_C4, Halbenote},

  
  //"B-Teil Takte 6-13"
  {NOTE_D4, Viertelnote}, {NOTE_D4, Viertelnote}, {NOTE_E4, Viertelnote}, {NOTE_C4, Viertelnote}, //keine Ahnung welche Note tiefer ist als
  {NOTE_D4, Viertelnote}, {NOTE_E4, Achtelnote}, {NOTE_F4, Achtelnote}, {NOTE_E4, Viertelnote}, {NOTE_C4, Viertelnote},
  {NOTE_D4, Viertelnote}, {NOTE_E4, Achtelnote}, {NOTE_F4, Achtelnote}, {NOTE_E4, Viertelnote}, {NOTE_D4, Viertelnote},
  {NOTE_C4, Viertelnote}, {NOTE_D4, Viertelnote}, {NOTE_G3, Viertelnote}, {NOTE_E4, Halbenote},
  {NOTE_E4, Viertelnote}, {NOTE_F4, Viertelnote}, {NOTE_G4, Viertelnote},
  {NOTE_G4, Viertelnote}, {NOTE_F4, Viertelnote}, {NOTE_E4, Viertelnote}, {NOTE_D4, Viertelnote},
  {NOTE_C4, Viertelnote}, {NOTE_C4, Viertelnote}, {NOTE_D4, Viertelnote}, {NOTE_E4, Viertelnote},
  {NOTE_D4, PunktierteViertelnote}, {NOTE_C5, Achtelnote}, {NOTE_C4, Halbenote},
};

bool isPlaying = false;






void setup() {
  pinMode(6,OUTPUT); //rote LED
  pinMode(7,OUTPUT); // grüne LED
  pinMode(BUZZER_PIN, OUTPUT);

  Serial.begin(9600);
  SPI.begin();

  mfrc522.PCD_Init();
  delay(4);
  mfrc522.PCD_DumpVersionToSerial();
  
  Serial.println("--------------------------");
  Serial.println(" Access Control ");
  Serial.println("Scan Your Card>>");
  
}

void playMelody() {
  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    int note = melody[i][0];  // Frequenz der Note
    int duration = melody[i][1];  // Dauer der Note

    if (note != NOTE_REST) {
      tone(BUZZER_PIN, note, duration);  // Ton abspielen
    }
    delay(duration);  // Warte die Dauer der Note

    noTone(BUZZER_PIN);  // Stopp Ton
    delay(50);  // Kurze Pause zwischen den Noten
  }
}




void loop() 
{
  
  while (getID()) {
    
    if ((tagID == MasterTag) || (tagID == MasterTag2)){
      Serial.println(" Access Granted!");
      Serial.println("--------------------------");

      digitalWrite(7, HIGH); // Grüne LED an
      digitalWrite(6, LOW);  // Rote LED aus
      playMelody();  
      //tone(BUZZER_PIN, 1000, 200); // Buzzer Ton 1000Hz für 200ms

    }
    
    else{
      Serial.println(" Access Denied!");
      Serial.println("--------------------------");

      digitalWrite(6, HIGH); // Rote LED an
      digitalWrite(7, LOW);  // Grüne LED aus

      tone(BUZZER_PIN, 180, 400); //500Hz für 400ms
    }
    

    
    delay(2000);
    digitalWrite(6, LOW); // Rote LED aus
    digitalWrite(7, LOW); // Grüne LED aus
    noTone(BUZZER_PIN);



    Serial.println(" Access Control ");
    Serial.println("Scan Your Card>>");
  }
  
}



boolean getID() 
{
 

  if ( ! mfrc522.PICC_IsNewCardPresent()) {
    return false;
  }
  
    if ( ! mfrc522.PICC_ReadCardSerial()) {
  return false;
  }
  
  tagID = "";

  for ( uint8_t i = 0; i < 4; i++) {
  
  tagID.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  
  tagID.toUpperCase();
  mfrc522.PICC_HaltA(); 
  return true;
 
}